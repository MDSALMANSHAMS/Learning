Memory Addressing and Array Storage in C++

Memory Addressing:
Memory is organized linearly with each byte having a unique address. Addresses are 
often represented in hexadecimal (base 16) for compactness.

Hexadecimal Numbering:
Hexadecimal uses digits 0-9 and letters A-F.

Examples:
0x0 = 0
0xA = 10
0xC = 12
0x10 = 16

Array Storage:
In C++, arrays are stored in contiguous memory locations. Each element of an int array 
typically occupies 4 bytes.

Example Array:
int nums[] = {1, 2, 3, 4, 5};

Assuming base address is 0x61fe00:
nums[0] at 0x61fe00
nums[1] at 0x61fe04
nums[2] at 0x61fe08
nums[3] at 0x61fe0C (12 in decimal = C in hexadecimal)
nums[4] at 0x61fe10

Full chart:
0x0 = 0
0x1 = 1
0x2 = 2
0x3 = 3
0x4 = 4
0x5 = 5
0x6 = 6
0x7 = 7
0x8 = 8
0x9 = 9
0xA = 10
0xB = 11
0xC = 12
0xD = 13
0xE = 14
0xF = 15
0x10 = 16
0x11 = 17